/*某城镇进行人口普查，得到了全体居民的生日。现请你写个程序，找出镇上最年长和最年轻的人。
这里确保每个输入的日期都是合法的，但不一定是合理的――假设已知镇上没有超过200岁的老人，而今天是2014年9月6日，所以超过200岁的生日和未出生的生日都是不合理的，
应该被过滤掉。

输入格式：
输入在第一行给出正整数N，取值在(0, 105]；随后N行，每行给出1个人的姓名（由不超过5个英文字母组成的字符串）、
以及按“yyyy/mm/dd”（即年/月/日）格式给出的生日。题目保证最年长和最年轻的人没有并列。

输出格式：
在一行中顺序输出有效生日的个数、最年长人和最年轻人的姓名，其间以空格分隔。

输入样例：
5
John 2001/05/12
Tom 1814/09/06
Ann 2121/01/30
James 1814/09/05
Steve 1967/11/20
输出样例：
3 Tom John
*/
#include <cstdio>
struct people{
	char name[6];
	int year,month,day;
}max,min,temp;

int main(){
	int N;
	scanf("%d",&N);
	int i;
	int count = 0;
	int t = 20140906,tt;
	int mmax = 0,mmin = 200000;
	for (i = 0;i < N;i++){
		scanf("%s%d/%d/%d",temp.name,&temp.year,&temp.month,&temp.day);
		//printf("%s %d %d %d",na,y,m,d);
		tt = 10000*temp.year+100*temp.month+temp.day;
		if (t - tt > 2000000) continue;
		else if (tt > t) continue;
		else {
			count++;
			if (t - tt > mmax){
				mmax = t - tt;
				max = temp;
			}
			if (t - tt < mmin){
				mmin = t - tt;
				min = temp;
			}
		}
	}
	if (count == 0) printf("0");
	else printf("%d %s %s",count,max.name,min.name);
}
